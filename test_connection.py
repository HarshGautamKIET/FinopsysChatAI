#!/usr/bin/env python3
"""
Quick Database Connection Test
Tests if the database connection works and returns sample data
"""

import sys
import os
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from config import Config
import psycopg2
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_database_connection():
    """Test database connection and query execution"""
    config = Config()
    
    try:
        print("üîç Testing database connection...")
        
        # Connect to database
        conn = psycopg2.connect(
            host=config.POSTGRES_HOST,
            port=config.POSTGRES_PORT,
            user=config.POSTGRES_USER,
            password=config.POSTGRES_PASSWORD,
            database=config.POSTGRES_DATABASE,
            options=f'-c search_path={config.POSTGRES_SCHEMA}'
        )
        
        print("‚úÖ Database connection successful!")
        
        cursor = conn.cursor()
        
        # Test basic query
        cursor.execute("SELECT COUNT(*) FROM ai_invoice")
        total_count = cursor.fetchone()[0]
        print(f"üìä Total invoices in database: {total_count}")
        
        # Test vendor-specific query
        cursor.execute("SELECT DISTINCT vendor_id FROM ai_invoice LIMIT 5")
        vendors = cursor.fetchall()
        print(f"üè¢ Available vendors: {[v[0] for v in vendors]}")
        
        # Test a sample query that would be generated by the LLM
        test_vendor = vendors[0][0] if vendors else None
        if test_vendor:
            cursor.execute(f"""
                SELECT case_id, amount, balance_amount, status 
                FROM ai_invoice 
                WHERE vendor_id = '{test_vendor}' 
                LIMIT 5
            """)
            sample_data = cursor.fetchall()
            print(f"üìã Sample data for vendor {test_vendor}:")
            for row in sample_data:
                print(f"   Case: {row[0]}, Amount: ${row[1]}, Balance: ${row[2]}, Status: {row[3]}")
        
        cursor.close()
        conn.close()
        
        print("\n‚úÖ Database connection test PASSED!")
        print("üöÄ The application should work correctly now.")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Database connection test FAILED: {str(e)}")
        print("\nüîß Troubleshooting steps:")
        print("1. Check if PostgreSQL service is running")
        print("2. Verify credentials in .env file")
        print("3. Ensure database 'finopsys_db' exists")
        print("4. Run 'python setup_database.py' to create tables")
        return False

if __name__ == "__main__":
    success = test_database_connection()
    sys.exit(0 if success else 1)
